Q4. Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?

 Ans:
   In JavaScript, operator precedence and associativity define the order in which operators are evaluated in an expression. These concepts are crucial because they determine the outcome of expressions and help in understanding how JavaScript interprets and executes code.

**Operator Precedence**:
- Operator precedence determines the order in which different types of operators are evaluated when they appear together in an expression.
- Higher precedence operators are evaluated first.
- For instance, multiplication `*` has a higher precedence than addition `+`, so `2 + 3 * 4` will result in `14`, as multiplication is performed before addition.
- Parentheses `()` can be used to explicitly define the order of evaluation, overriding the default precedence.
- It's essential to understand precedence to predict the order in which operations will be executed, ensuring the expected outcome of expressions.

**Operator Associativity**:
- Associativity determines the direction in which operators of the same precedence are evaluated.
- It can be left-to-right or right-to-left.
- For example, in JavaScript, most arithmetic operators have left-to-right associativity. So, `6 / 2 / 3` will be evaluated as `(6 / 2) / 3` resulting in `1`.
- Some operators, like the assignment operator `=`, have right-to-left associativity. For example, `a = b = 5` is evaluated as `a = (b = 5)`, assigning `5` to both `b` and `a`.

Understanding operator precedence and associativity helps in writing clearer and more predictable code. It ensures that expressions are evaluated in the intended order, avoiding unexpected behavior or errors. It also helps in minimizing the use of unnecessary parentheses and enhances code readability by following JavaScript's default rules of evaluation.